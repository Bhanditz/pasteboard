{"name":"Pasteboard","tagline":"Creative Commons Pasteboard","body":"# Creative Commons Pasteboard\r\n\r\n## Introduction\r\n\r\nThe Creative Commons Pasteboard is a browser extension used to help users easily clip content from different sources aroud the web. It also helps users by automatically adding attribution information when users paste their clips into documents.\r\n\r\n![Early Mockup](http://wiki.creativecommons.org/images/2/2c/Pasteboard_mockup.png)\r\n\r\n[Creative Commons Wiki about Pasteboard](http://wiki.creativecommons.org/Products/Pasteboard)\r\n\r\n## Browser Extensions\r\n\r\nBrowser extensions are used to inject required scripts into the page in order to do the following:\r\n\r\n### Functions of browser extension\r\n\r\n * Display the pasteboard user interface using an iframe\r\n * Capture mouse gestures ( drag clips towards page bottom ) and display the UI\r\n * Keep the channel ready for messages from the pasteboard\r\n\r\n### Supported Browsers\r\n\r\n * [Google Chrome](google-chrome)\r\n * Mozilla Firefox (todo)\r\n * Opera (todo)\r\n\r\n### TODO\r\n\r\n * __Revise this TODO list__\r\n * Support Mozilla Firefox\r\n\r\n### Google Chrome\r\n\r\n#### Mouse Gestures\r\n\r\nThe pasteboard is displayed when user selects content and drags it towards page bottom. gesture is recognized if user drags the clip `5` pixels towards page bottom within `300` milliseconds.\r\n\r\n#### Communications with Pasteboard User Interface\r\n\r\nCurrently all communications with pasteboard is done directly using [Mozilla jschannel](https://github.com/mozilla/jschannel). The iframe is used to create the channel.\r\n\r\n#### TODO\r\n\r\n * __Revise this TODO list__\r\n * Improved drag gesture recognizer\r\n\r\n## Pasteboard User Interface\r\n\r\nThe app which loads inside the iframe created by the browser extension. At this stage it uses firebase to store clip content and firebase built-in authentication using Mozilla Persona. The interface is managed by AngularJS using AngularFire to connect with firebase.\r\n\r\n### Content Management\r\n\r\nTo keep data in sync, the pasteboard UI uses AngularJS and AngularFire and creates a 3-way data-binding between Firebase, Javascript and the page (DOM).\r\n\r\n### User Registration/Login\r\n\r\nUses Firebase built-in [authentication](https://www.firebase.com/docs/security/authentication.html) [\"Firebase simple auth\"](https://www.firebase.com/docs/security/simple-login-overview.html) via the [AngularFire](http://angularfire.com/documentation.html#authentication) plugin. No user registration is required at the moment. The account and related data is created in Firebase when user logs in for the first time.\r\n\r\n### Communications with Browser Extension\r\n\r\nCurrently all communications with browser is done directly using [Mozilla jschannel](https://github.com/mozilla/jschannel).\r\n\r\n##### Listens to\r\n\r\n * __addClip(clip)<br>__\r\n   clip : A javascript object which contains clip and attribution data\r\n\r\n##### Calls\r\n\r\n * __ResizePasteboard(size)<br>__\r\n   size : 'normal', 'maximized'\r\n\r\n### TODO\r\n\r\n * __Revise this TODO list__\r\n * Use html5 appcache to speedup loading resources\r\n * Use html5 localStorage to cache clip data and user preferences\r\n * Synchronize localStorage data with firebase data\r\n * Rewrite the code to use CommonJS modules for better namespace management\r\n * Decrease dependencies (AngularJS, AngularFire, Firebase Authentication, etc.)\r\n * Use pasteboard server authentication instead of Firebase built-in system\r\n * Connect and use Google Drive API to browse and open documents\r\n * Implement dragging clips from pasteboard to Google Docs\r\n * A javascript/node.js API to integrate the pasteboard with other editors\r\n * Implement dragging clips from pasteboard to other editors using API\r\n * Automatically add attribution information to documents when using clips\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}